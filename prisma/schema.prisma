// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                   String    @id @default(uuid())
  firstname            String
  lastname             String
  username             String    @unique
  email                String    @unique
  password             String
  profilePicture       String? // URL to profile picture
  public_id            String?
  passwordResetToken   String? // Token for password reset
  passwordResetExpires DateTime? // Expiration time for the token
  status               String? // User's status (e.g., "Hey there!")
  online               Boolean   @default(false) // Online/offline status
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Friends relationships
  sentRequests     Friend[] @relation("SentRequests")
  receivedRequests Friend[] @relation("ReceivedRequests")

  // Messages sent/received
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  media            Media[]

  @@map("users")
}

// Friend Model (for friend requests and relationships)
model Friend {
  id          String   @id @default(uuid())
  requesterId String
  requesteeId String
  status      String   @default("pending") // "pending", "accepted", "rejected", "blocked"
  createdAt   DateTime @default(now())
  blocker_id  String?

  // Relations to users
  requester User @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  requestee User @relation("ReceivedRequests", fields: [requesteeId], references: [id], onDelete: Cascade)

  @@map("friends")
}

// Message Model (for text, images, and videos)
model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String? // Text content of the message
  timestamp  DateTime @default(now())

  // Relations to users
  sender   User @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  // Relation to Media
  media Media[]

  @@map("messages")
}

// Media Model (for images/videos storage)
model Media {
  id           String   @id @default(uuid())
  public_id    String
  url          String // URL of the media file
  type         String // "image", "video"
  uploadedById String
  uploadedAt   DateTime @default(now())

  // Relation to the user who uploaded
  uploadedBy User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  messageId  String @unique

  // Relation to Message
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("medias")
}
