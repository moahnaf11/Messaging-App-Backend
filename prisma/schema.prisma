// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id             String   @id @default(uuid())
  firstname      String
  lastname       String
  username       String   @unique
  email          String   @unique
  password       String
  profilePicture String? // URL to profile picture
  status         String? // User's status (e.g., "Hey there!")
  online         Boolean  @default(false) // Online/offline status
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Friends relationships
  sentRequests     Friend[] @relation("SentRequests")
  receivedRequests Friend[] @relation("ReceivedRequests")

  // Messages sent/received
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  media            Media[]
}

// Friend Model (for friend requests and relationships)
model Friend {
  id          String   @id @default(uuid())
  requesterId String
  requesteeId String
  status      String   @default("pending") // "pending", "accepted", "rejected", "blocked"
  createdAt   DateTime @default(now())

  // Relations to users
  requester User @relation("SentRequests", fields: [requesterId], references: [id])
  requestee User @relation("ReceivedRequests", fields: [requesteeId], references: [id])
}

// Message Model (for text, images, and videos)
model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String? // Text content of the message
  mediaId    String? // Relation to a media file, if any
  type       String   @default("text") // "text", "image", "video"
  timestamp  DateTime @default(now())

  // Relations to users
  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])

  // Relation to Media (optional)
  media Media? @relation(fields: [mediaId], references: [id])
}

// Media Model (for images/videos storage)
model Media {
  id           String   @id @default(uuid())
  url          String // URL of the media file
  type         String // "image", "video"
  uploadedById String
  uploadedAt   DateTime @default(now())

  // Relation to the user who uploaded
  uploadedBy User      @relation(fields: [uploadedById], references: [id])
  Message    Message[]
}
