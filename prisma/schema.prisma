// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Model
model User {
  id                   String    @id @default(uuid())
  firstname            String
  lastname             String
  username             String    @unique
  email                String    @unique
  password             String
  profilePicture       String? // URL to profile picture
  public_id            String?
  passwordResetToken   String? // Token for password reset
  passwordResetExpires DateTime? // Expiration time for the token
  status               String?   @default("I'm new to whispr")
  online               Boolean   @default(false) // Actual online/offline status based on socket activity
  showOnlineStatus     Boolean   @default(true) // Determines if the user wants to show online status
  createdAt            DateTime  @default(now())
  updatedAt            DateTime  @updatedAt

  // Friends relationships
  sentRequests     Friend[] @relation("SentRequests")
  receivedRequests Friend[] @relation("ReceivedRequests")

  // Messages sent/received
  sentMessages     Message[]     @relation("SentMessages")
  receivedMessages Message[]     @relation("ReceivedMessages")
  media            Media[]
  GroupChat        GroupChat[]
  GroupMember      GroupMember[]

  @@map("users")
}

// Friend Model (for friend requests and relationships)
model Friend {
  id                String   @id @default(uuid())
  requesterId       String
  requesteeId       String
  status            String   @default("pending") // "pending", "accepted", "rejected", "blocked"
  createdAt         DateTime @default(now())
  blocker_id        String?
  requester_display String   @default("unarchived") // "archived", "unarchived", "hidden"
  requestee_display String   @default("unarchived") // "archived", "unarchived", "hidden"

  // Relations to users
  requester    User           @relation("SentRequests", fields: [requesterId], references: [id], onDelete: Cascade)
  requestee    User           @relation("ReceivedRequests", fields: [requesteeId], references: [id], onDelete: Cascade)
  Notification Notification[]
  Message      Message[]

  @@map("friends")
}

// GroupChat Model (Stores Group Info)
model GroupChat {
  id         String   @id @default(uuid())
  name       String // Group name
  picture    String? //url to group photo
  public_id  String?
  creatorId  String? // ID of user who created the group
  createdAt  DateTime @default(now())
  admin_only Boolean  @default(false)

  // Relation to Creator
  creator User? @relation(fields: [creatorId], references: [id], onDelete: SetNull)

  // Relation to Members
  members GroupMember[]

  // Relation to Messages
  messages              Message[]
  GroupChatNotification GroupChatNotification[]

  @@map("group_chats")
}

// GroupMember Model (Stores Group Members & Their Role)
model GroupMember {
  id       String   @id @default(uuid())
  userId   String // User in the group
  groupId  String // The group the user is part of
  role     String   @default("member") // "admin", "member"
  joinedAt DateTime @default(now())
  archived Boolean  @default(false)

  // Relations
  user                           User                             @relation(fields: [userId], references: [id], onDelete: Cascade)
  group                          GroupChat                        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  GroupChatNotificationRecipient GroupChatNotificationRecipient[]

  @@unique([userId, groupId]) // Ensure a user can't join the same group multiple times
  @@map("group_members")
}

// Message Model (for text, images, and videos)
model Message {
  id          String   @id @default(uuid())
  senderId    String
  receiverId  String?
  content     String? // Text content of the message
  timestamp   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  groupChatId String?
  friendId    String?

  // Relations to users
  sender   User  @relation("SentMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User? @relation("ReceivedMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  // Relation to Media
  media     Media[]
  groupChat GroupChat? @relation(fields: [groupChatId], references: [id], onDelete: Cascade)
  friend    Friend?    @relation(fields: [friendId], references: [id])

  @@map("messages")
}

// Media Model (for images/videos storage)
model Media {
  id           String   @id @default(uuid())
  public_id    String
  url          String // URL of the media file
  type         String // "image", "video"
  uploadedById String
  uploadedAt   DateTime @default(now())

  // Relation to the user who uploaded
  uploadedBy User   @relation(fields: [uploadedById], references: [id], onDelete: Cascade)
  messageId  String

  // Relation to Message
  message Message @relation(fields: [messageId], references: [id], onDelete: Cascade)

  @@map("medias")
}

model Notification {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String?
  friendId   String?
  status     String   @default("unread") // "read" or "unread"
  timestamp  DateTime @default(now())

  // relations
  friend Friend? @relation(fields: [friendId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model GroupChatNotification {
  id       String @id @default(uuid())
  senderId String
  groupId  String // The group where this notification belongs

  // Relation to Group Chat
  group                          GroupChat                        @relation(fields: [groupId], references: [id], onDelete: Cascade)
  GroupChatNotificationRecipient GroupChatNotificationRecipient[]
}

model GroupChatNotificationRecipient {
  id             String @id @default(uuid())
  notificationId String // Reference to GroupChatNotification
  groupMemberId  String // Reference to GroupMember

  // Relations
  notification GroupChatNotification @relation(fields: [notificationId], references: [id], onDelete: Cascade)
  groupMember  GroupMember           @relation(fields: [groupMemberId], references: [id], onDelete: Cascade)

  @@unique([notificationId, groupMemberId]) // Ensure each member gets only one copy of a notification
  @@map("group_chat_notification_recipients")
}
